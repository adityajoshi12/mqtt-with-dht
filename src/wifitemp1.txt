#include <Arduino.h>
#include "DHT.h"
#include <Adafruit_Sensor.h>
#include <DHT_U.h>
#include <string.h>
#include <ESP8266WiFi.h>

#include <ESP8266WebServer.h>
#include <DNSServer.h>
#include <WiFiManager.h>
#include <Ticker.h>
#define DHTTYPE DHT11
#define DHT11_PIN 5
uint32_t delayMS = 3000;

Ticker ticker;
DHT dht(DHT11_PIN, DHTTYPE);

void loop()
{

  delay(delayMS);
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  float f = dht.readTemperature(true);
  if (isnan(h) || isnan(t) || isnan(f))
  {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  float hif = dht.computeHeatIndex(f, h);
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.print(" *C ");
  Serial.print(f);
  Serial.print(" *F\t");
  Serial.print("Heat index: ");
  Serial.print(hic);
  Serial.print(" *C ");
  Serial.print(hif);
  Serial.println(" *F");
  delay(delayMS);
}

void setup()
{
  // put your setup code here, to run once:

  Serial.begin(9600);
  dht.begin();
  Serial.println(F("DHT11 Unified Sensor Data"));
  //set led pin as output
  pinMode(BUILTIN_LED, OUTPUT);
  // start ticker with 0.5 because we start in AP mode and try to connect
  ticker.attach(0.6, tick);
  uint32_t a = ESP.getFlashChipId();
  String s = String(a);
  s = "ESP" + s;
  char tab2[1024];
  strcpy(tab2, s.c_str());
  //WiFiManager
  //Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wifiManager;
  //reset settings - for testing
  //wifiManager.resetSettings();
  char userId[10] = "";
  char connectionString[40] = "";
  WiFiManagerParameter useridText("<p style=\"margin-bottom: -16px;\">Enter User ID (10 characters )</p>");
  wifiManager.addParameter(&useridText);
  WiFiManagerParameter userIdInput("userId", "User ID", userId, 10);
  wifiManager.addParameter(&userIdInput);
  WiFiManagerParameter connectionStringText("<p style=\"margin-bottom: -16px;\">Enter Connection ID (40 characters)</p>");
  wifiManager.addParameter(&connectionStringText);
  WiFiManagerParameter connectionStringTextInput("connectionString", "Connection ID", connectionString, 40);
  wifiManager.addParameter(&connectionStringTextInput);
  //set callback that gets called when connecting to previous WiFi fails, and enters Access Point mode
  wifiManager.setAPCallback(configModeCallback);

  //fetches ssid and pass and tries to connect
  //if it does not connect it starts an access point with the specified name
  //here  "AutoConnectAP"
  //and goes into a blocking loop awaiting configuration
  if (!wifiManager.autoConnect(tab2, "password"))
  {
    Serial.println("failed to connect and hit timeout");
    //reset and try again, or maybe put it to deep sleep
    ESP.reset();
    delay(1000);
  }

  //if you get here you have connected to the WiFi
  Serial.println("connected...yeey :)");

  Serial.println("*******************data captured is*******************");
  Serial.println(userIdInput.getValue());
  Serial.println(connectionStringTextInput.getValue());
  ticker.detach();
  //keep LED on
  digitalWrite(BUILTIN_LED, LOW);
}

void tick()
{
  //toggle state
  int state = digitalRead(BUILTIN_LED); // get the current state of GPIO1 pin
  digitalWrite(BUILTIN_LED, !state);    // set pin to the opposite state
}

void configModeCallback(WiFiManager *myWiFiManager)
{
  Serial.println("Entered config mode");
  Serial.println(WiFi.softAPIP());
  //if you used auto generated SSID, print it
  Serial.println(myWiFiManager->getConfigPortalSSID());
  //entered config mode, make led toggle faster
  ticker.attach(0.2, tick);
}
